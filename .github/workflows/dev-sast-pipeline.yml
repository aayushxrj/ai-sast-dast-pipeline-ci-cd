name: Dev SAST Pipeline

on:
    push:
      branches: [ "main" ]
  
    # Leave this empty (i.e., pull_request:) to trigger on PRs to all branches
    # pull_request:
    #   branches: [ "main" ]  

    pull_request_target:
      branches: [ "main" ]  # Only triggers on PRs targeting 'main'
  
    # Scheduled run every Friday at 12:00 PM IST (6:30 AM UTC)
    # schedule:
    #   - cron: '30 6 * * 5'
  
jobs:
  sast:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      pull-requests: write # for commenting on PRs with LLM suggestions

    name: Run SAST (Bandit + Semgrep + Gitleaks)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch (for pull_request_target)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Checkout main code (for push or pull_request)
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Pull full history

      - name: Get changed files
        id: changed-files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            echo "üîç Detected PR event..."
            git fetch origin main
            files=$(git diff --name-only origin/main ${{ github.sha }})
          else
            echo "üì¶ Detected push event..."
            git fetch origin
            files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi

          echo "üìÅ Changed files:"
          echo "$files"

          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT



      - name: Stop if no files changed
        if: steps.changed-files.outputs.files == ''
        run: |
          echo "üõë No files changed. Skipping rest of the pipeline."
          exit 0


      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Bandit and converter
        run: |
          pip install bandit
          # pip install bandit-sarif-formatter
      
      - name: Install Semgrep CLI
        run: pip install semgrep

      - name: Run Bandit on changed files (excluding tests/)
        if: steps.changed-files.outputs.files != ''
        run: |
          mkdir -p reports
          echo "${{ steps.changed-files.outputs.files }}" > changed_files.txt

          # Filter for .py files, excluding anything inside top-level 'tests/' directory
          py_files=$(cat changed_files.txt | grep -E '\.py$' | grep -v '^tests/' || true)

          if [[ -z "$py_files" ]]; then
            echo "üõë No Python files to scan with Bandit (excluding tests/)."
            exit 0
          fi

          echo "üöÄ Running Bandit on the following files:"
          echo "$py_files"

          bandit \
            $py_files \
            -f json \
            -o reports/bandit_report.json \
            -ll -iii || true


      # - name: Run Bandit
      #   run: |
      #     # Create a 'reports' directory if it doesn't exist
      #     mkdir -p reports
      
      #     # Run Bandit on the entire project directory (recursive)
      #     # -x tests        ‚Üí exclude the 'tests' folder
      #     # -f json         ‚Üí output the results in JSON format
      #     # -o ...          ‚Üí save the output to 'reports/bandit_report.json'
      #     # -ll             ‚Üí include low, medium, and high severity issues
      #     # -iii            ‚Üí show issue context lines in the report
      #     bandit -r . \
      #       -x tests \
      #       -f json \
      #       -o reports/bandit_report.json \
      #       -ll -iii || true
          
      #     bandit -r . \
      #       -x tests \
      #       --format sarif \
      #       --output reports/bandit_report.sarif || true

      # - name: Upload Bandit SARIF to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: reports/bandit_report.sarif
      #     category: bandit
      

      - name: Run Semgrep on changed files (excluding tests/)
        if: steps.changed-files.outputs.files != ''
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        run: |
          mkdir -p reports
          echo "${{ steps.changed-files.outputs.files }}" > changed_files.txt

          # Filter for files that are not in 'tests/' and exist (in case of renames/deletes)
          valid_files=$(cat changed_files.txt | grep -v '^tests/' | xargs -r ls 2>/dev/null || true)

          if [[ -z "$valid_files" ]]; then
            echo "üõë No valid files to scan with Semgrep (excluding tests/)."
            exit 0
          fi

          echo "üöÄ Running Semgrep on:"
          echo "$valid_files"

          semgrep \
            --config auto \
            --json \
            --output reports/semgrep_report.json \
            $valid_files || true


      # - name: Login to Semgrep
      #   run: semgrep login
      #   env:
      #     SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      # - name: Run Semgrep via CLI
      #   run: |
      #     mkdir -p reports

      #     semgrep --config auto \
      #             --exclude tests \
      #             --json \
      #             --output reports/semgrep_report.json || true
          
      # #     semgrep --config auto \
      # #             --exclude tests \
      # #             --sarif \
      # #             --output reports/semgrep_report.sarif || true   
      #   env:
      #       SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}           

      # - name: Upload Semgrep SARIF to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: reports/semgrep_report.sarif
      #     category: semgrep
      
      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.27.2/gitleaks_8.27.2_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Run Gitleaks (JSON + SARIF)
        run: |
          mkdir -p reports

          # JSON report
          gitleaks detect \
            --source . \
            --no-git \
            --report-format json \
            --report-path reports/gitleaks_report.json || true

          # # SARIF report (for GitHub Security)
          # gitleaks detect \
          #   --source . \
          #   --no-git \
          #   --report-format sarif \
          #   --report-path reports/gitleaks_report.sarif || true

      # - name: Upload Gitleaks SARIF to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: reports/gitleaks_report.sarif
      #     category: gitleaks
  
      
      - name: Combine SAST JSON reports
        run: python combine_reports.py

      - name: Deduplicate issues
        run: python deduplicate_reports.py

      - name: Install dotenv and google-generativeai 
        run: pip install google-generativeai dotenv

      - name: Generate LLM resolutions
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python get_resolutions.py

      - name: Convert to SARIF
        run: python resolution2sarif.py

      # Makes the report downloadable from the Actions tab
      - name: Upload Bandit, Semgrep and Gitleaks reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      - name: Upload final_report SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/final_report.sarif
          category: ai-sast-dast-pipeline

      - name: Comment on PR with LLM suggestions
        if: github.event_name == 'pull_request_target'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          pip install requests
          python comment_on_pr.py


      - name: Notify Slack with security summary (PR)
        if: github.event_name == 'pull_request_target'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          pip install requests dotenv
          python notify_slack.py

      - name: Notify Slack with security summary (push)
        if: github.event_name != 'pull_request_target'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          pip install requests dotenv
          python notify_slack.py